import matplotlib.pyplot as plt
from sklearn.svm import SVR
from sklearn import datasets
from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import mean_squared_error, r2_score
plt.rcParams['font.sans-serif'] = ['SimHei']
import numpy as np
import pandas as pd
 
# 数据加载与预处理
data = pd.read_excel("your_data_way.xlsx")  # 
X = data[['P', 'U', 'PGDP', 'E', 'PT', 'FT', 'CI']]
y = data['TE']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)


# 数据标准化
scaler_x = StandardScaler()
X_train_std = scaler_x.fit_transform(X_train)
X_test_std = scaler_x.transform(X_test)



scaler_y = StandardScaler()
y_train_std = scaler_y.fit_transform(y_train.values.reshape(-1,1)).ravel()
y_test_std = scaler_y.transform(y_test.values.reshape(-1,1)).ravel()


## [1e-3,1e-2,1e-1,1e0, 1e1, 1e2, 1e3]
 
# 设置待测试的参数
param_grid = {"C":np.arange(0,10,0.1) ,   # [1e-3,1e-2,1e-1,1e0,1e1, 1e2, 1e3]
              "gamma": np.arange(0, 10, 0.01)}
 
# 利用GridSearchCV寻找最优参数
model = GridSearchCV(SVR(kernel='linear', gamma=0.1), cv=5, param_grid=param_grid)
model.fit(X_train_std, y_train_std)
 
# 打印最优参数
print("The best parameters are %s with a score of %0.2f" % (model.best_params_, model.best_score_))
 
# 做预测
y_pred = model.predict(X_test_std)
 
# 打印R2分数和均方误差
print('R2 score: ', r2_score(y_test_std, y_pred))
print('Mean squared error: ', mean_squared_error(y_test_std, y_pred))
 
# # 绘图
# plt.scatter(y_test_std, y_pred, color='blue')
# plt.plot([y_test_std.min(), y_test_std.max()], [y_test_std.min(), y_test_std.max()], 'k--', lw=3)
# plt.xlabel('真实值')
# plt.ylabel('预测值')
# plt.title('SVR预测结果显示')
# plt.grid()
# plt.show()
